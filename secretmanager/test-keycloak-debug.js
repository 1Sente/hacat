const axios = require('axios');

async function testKeycloakDebug() {
  try {
    console.log('üîê –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Keycloak...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Keycloak
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Keycloak...');
    const keycloakResponse = await axios.get('http://localhost:8080/');
    console.log('‚úÖ Keycloak –¥–æ—Å—Ç—É–ø–µ–Ω');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const adminTokenResponse = await axios.post('http://localhost:8080/realms/master/protocol/openid-connect/token', 
      new URLSearchParams({
        grant_type: 'password',
        client_id: 'admin-cli',
        username: 'admin',
        password: 'admin'
      }),
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );
    
    const adminToken = adminTokenResponse.data.access_token;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω');
    
    // 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...');
    const clientsResponse = await axios.get('http://localhost:8080/admin/realms/master/clients', {
      headers: {
        'Authorization': `Bearer ${adminToken}`
      }
    });
    
    const clients = clientsResponse.data;
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã');
    
    const secretmanagerClients = clients.filter(c => 
      c.clientId === 'secretmanager-client' || c.clientId === 'secretmanager-admin'
    );
    
    console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:');
    for (const client of secretmanagerClients) {
      console.log(`- ${client.clientId}: ${client.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}`);
      console.log(`  - Standard Flow: ${client.standardFlowEnabled ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - Direct Access Grants: ${client.directAccessGrantsEnabled ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - Public Client: ${client.publicClient ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - Redirect URIs: ${client.redirectUris?.join(', ') || '–ù–µ—Ç'}`);
      console.log(`  - Web Origins: ${client.webOrigins?.join(', ') || '–ù–µ—Ç'}`);
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...');
    
    for (const client of secretmanagerClients) {
      console.log(`\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ${client.clientId}...`);
      try {
        const tokenResponse = await axios.post('http://localhost:8080/realms/master/protocol/openid-connect/token', 
          new URLSearchParams({
            grant_type: 'password',
            client_id: client.clientId,
            username: 'admin-user',
            password: 'admin123'
          }),
          {
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          }
        );
        
        console.log(`‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è ${client.clientId} –ø–æ–ª—É—á–µ–Ω`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º userinfo
        try {
          const userInfoResponse = await axios.get('http://localhost:8080/realms/master/protocol/openid-connect/userinfo', {
            headers: {
              'Authorization': `Bearer ${tokenResponse.data.access_token}`,
              'Content-Type': 'application/json'
            }
          });
          console.log(`‚úÖ Userinfo –¥–ª—è ${client.clientId} —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        } catch (error) {
          console.log(`‚ùå Userinfo –¥–ª—è ${client.clientId} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:`, error.response?.data || error.message);
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è ${client.clientId}:`, error.response?.data || error.message);
      }
    }
    
    console.log('\nüéâ –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Keycloak –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

testKeycloakDebug();
