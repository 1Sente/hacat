services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: secretmanager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-keycloak-db.sh:/docker-entrypoint-initdb.d/init-keycloak-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # OpenBao (Secret Management)
  openbao:
    image: openbao/openbao:latest
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - openbao_data:/vault/data
    networks:
      - app-network

  # Keycloak (Authentication)
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/secretmanager
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: 'false'
    ports:
      - "8080:8080"
    command: start-dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.simple
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/secretmanager
      OPENBAO_URL: http://openbao:8200
      OPENBAO_TOKEN: s.8SfOkXLWNZCcjzDY0l3MMYcf
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: master
      KEYCLOAK_CLIENT_ID: secretmanager-client
      JWT_SECRET: your-jwt-secret-key-change-in-production
      PORT: 8000
      HOST: 0.0.0.0
      NODE_ENV: production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      openbao:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  frontend-client:
    build:
      context: ./frontend-client
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:8000/api
        VITE_KEYCLOAK_URL: http://localhost:8080
        VITE_KEYCLOAK_REALM: master
        VITE_KEYCLOAK_CLIENT_ID: secretmanager-client
        VITE_WS_URL: http://localhost:8000
    environment:
      VITE_API_URL: http://localhost:8000/api
      VITE_KEYCLOAK_URL: http://localhost:8080
      VITE_KEYCLOAK_REALM: master
      VITE_KEYCLOAK_CLIENT_ID: secretmanager-client
      VITE_WS_URL: http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Admin
  frontend-admin:
    build:
      context: ./frontend-admin
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:8000/api
        VITE_KEYCLOAK_URL: http://localhost:8080
        VITE_KEYCLOAK_REALM: master
        VITE_KEYCLOAK_CLIENT_ID: secretmanager-admin
        VITE_WS_URL: http://localhost:8000
    environment:
      VITE_API_URL: http://localhost:8000/api
      VITE_KEYCLOAK_URL: http://localhost:8080
      VITE_KEYCLOAK_REALM: master
      VITE_KEYCLOAK_CLIENT_ID: secretmanager-admin
      VITE_WS_URL: http://localhost:8000
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  openbao_data:

networks:
  app-network:
    driver: bridge