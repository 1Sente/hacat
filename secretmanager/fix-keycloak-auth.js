const axios = require('axios');

const KEYCLOAK_URL = 'http://localhost:8080';
const ADMIN_USERNAME = 'admin';
const ADMIN_PASSWORD = 'admin';
const REALM = 'master';

async function waitForKeycloak() {
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Keycloak...');
  let attempts = 0;
  const maxAttempts = 30;
  
  while (attempts < maxAttempts) {
    try {
      await axios.get(`${KEYCLOAK_URL}/`);
      console.log('‚úÖ Keycloak –∑–∞–ø—É—â–µ–Ω');
      return true;
    } catch (error) {
      attempts++;
      console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  throw new Error('Keycloak –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥');
}

async function getAdminToken() {
  try {
    const response = await axios.post(`${KEYCLOAK_URL}/realms/master/protocol/openid-connect/token`, 
      new URLSearchParams({
        grant_type: 'password',
        client_id: 'admin-cli',
        username: ADMIN_USERNAME,
        password: ADMIN_PASSWORD
      }),
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );
    
    return response.data.access_token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.response?.data || error.message);
    throw error;
  }
}

async function deleteExistingClients(token) {
  try {
    const response = await axios.get(
      `${KEYCLOAK_URL}/admin/realms/${REALM}/clients`,
      {
        headers: { 'Authorization': `Bearer ${token}` }
      }
    );
    
    const clients = response.data.filter(c => 
      c.clientId === 'secretmanager-client' || c.clientId === 'secretmanager-admin'
    );
    
    for (const client of clients) {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ${client.clientId}...`);
      await axios.delete(
        `${KEYCLOAK_URL}/admin/realms/${REALM}/clients/${client.id}`,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );
    }
    
    console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã');
  } catch (error) {
    console.log('‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã');
  }
}

async function createClient(clientId, token) {
  const clientConfig = {
    clientId: clientId,
    name: `${clientId} Client`,
    description: `Client for ${clientId}`,
    enabled: true,
    clientAuthenticatorType: 'client-secret',
    secret: 'your-client-secret',
    standardFlowEnabled: true,
    implicitFlowEnabled: false,
    directAccessGrantsEnabled: true,
    serviceAccountsEnabled: true,
    publicClient: true,
    protocol: 'openid-connect',
    attributes: {
      'exclude.session.state.from.auth.response': 'false',
      'saml.assertion.signature': 'false',
      'saml.force.post.binding': 'false',
      'saml.multivalued.roles': 'false',
      'saml.encrypt': 'false',
      'saml.server.signature': 'false',
      'saml.server.signature.keyinfo.ext': 'false',
      'exclude.session.state.from.auth.response': 'false',
      'saml_force_name_id_format': 'false',
      'saml.client.signature': 'false',
      'tls.client.certificate.bound.access.tokens': 'false',
      'saml.authnstatement': 'false',
      'display.on.consent.screen': 'false',
      'saml.onetimeuse.condition': 'false'
    },
    redirectUris: [
      `http://localhost:3000/*`,
      `http://localhost:3001/*`,
      `http://localhost:3000/silent-check-sso.html`,
      `http://localhost:3001/silent-check-sso.html`
    ],
    webOrigins: [
      `http://localhost:3000`,
      `http://localhost:3001`
    ],
    defaultClientScopes: [
      'web-origins',
      'role_list',
      'profile',
      'roles',
      'email'
    ],
    optionalClientScopes: [
      'address',
      'phone',
      'offline_access',
      'microprofile-jwt'
    ]
  };

  try {
    await axios.post(
      `${KEYCLOAK_URL}/admin/realms/${REALM}/clients`,
      clientConfig,
      {
        headers: { 'Authorization': `Bearer ${token}` }
      }
    );
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientId} —Å–æ–∑–¥–∞–Ω`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, error.response?.data || error.message);
    throw error;
  }
}

async function createRoles(token) {
  const roles = ['admin', 'approver', 'user'];
  
  for (const roleName of roles) {
    try {
      await axios.post(
        `${KEYCLOAK_URL}/admin/realms/${REALM}/roles`,
        { name: roleName, description: `${roleName} role` },
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );
      console.log(`‚úÖ –†–æ–ª—å ${roleName} —Å–æ–∑–¥–∞–Ω–∞`);
    } catch (error) {
      if (error.response?.status === 409) {
        console.log(`‚ÑπÔ∏è –†–æ–ª—å ${roleName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ ${roleName}:`, error.response?.data || error.message);
      }
    }
  }
}

async function createUser(token) {
  const userData = {
    username: 'admin-user',
    email: 'admin@secretmanager.com',
    firstName: 'Admin',
    lastName: 'User',
    enabled: true,
    emailVerified: true,
    credentials: [{
      type: 'password',
      value: 'admin123',
      temporary: false
    }]
  };

  try {
    await axios.post(
      `${KEYCLOAK_URL}/admin/realms/${REALM}/users`,
      userData,
      {
        headers: { 'Authorization': `Bearer ${token}` }
      }
    );
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin-user —Å–æ–∑–¥–∞–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersResponse = await axios.get(
      `${KEYCLOAK_URL}/admin/realms/${REALM}/users?username=admin-user`,
      {
        headers: { 'Authorization': `Bearer ${token}` }
      }
    );
    
    const user = usersResponse.data[0];
    if (user) {
      // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏
      const roles = ['admin', 'approver', 'user'];
      for (const roleName of roles) {
        try {
          const roleResponse = await axios.get(
            `${KEYCLOAK_URL}/admin/realms/${REALM}/roles/${roleName}`,
            {
              headers: { 'Authorization': `Bearer ${token}` }
            }
          );
          
          await axios.post(
            `${KEYCLOAK_URL}/admin/realms/${REALM}/users/${user.id}/role-mappings/realm`,
            [roleResponse.data],
            {
              headers: { 'Authorization': `Bearer ${token}` }
            }
          );
          console.log(`‚úÖ –†–æ–ª—å ${roleName} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ ${roleName}:`, error.response?.data || error.message);
        }
      }
    }
    
  } catch (error) {
    if (error.response?.status === 409) {
      console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin-user —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.response?.data || error.message);
    }
  }
}

async function main() {
  try {
    console.log('üîê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Keycloak...\n');
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Keycloak
    await waitForKeycloak();
    
    console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const token = await getAdminToken();
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω\n');
    
    console.log('2Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...');
    await deleteExistingClients(token);
    
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ secretmanager-client...');
    await createClient('secretmanager-client', token);
    
    console.log('4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ secretmanager-admin...');
    await createClient('secretmanager-admin', token);
    
    console.log('\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π...');
    await createRoles(token);
    
    console.log('\n6Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await createUser(token);
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Keycloak –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üåê Admin Portal: http://localhost:3001');
    console.log('üåê Client Portal: http://localhost:3000');
    console.log('üë§ –õ–æ–≥–∏–Ω: admin-user');
    console.log('üîë –ü–∞—Ä–æ–ª—å: admin123');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();
