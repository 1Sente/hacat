const axios = require('axios');

const KEYCLOAK_URL = 'http://localhost:8080';
const ADMIN_USERNAME = 'admin';
const ADMIN_PASSWORD = 'admin';
const REALM = 'master';

async function waitForKeycloak() {
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Keycloak...');
  let attempts = 0;
  const maxAttempts = 30;
  
  while (attempts < maxAttempts) {
    try {
      await axios.get(`${KEYCLOAK_URL}/`);
      console.log('‚úÖ Keycloak –∑–∞–ø—É—â–µ–Ω');
      return true;
    } catch (error) {
      attempts++;
      console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  throw new Error('Keycloak –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥');
}

async function getAdminToken() {
  try {
    const response = await axios.post(`${KEYCLOAK_URL}/realms/master/protocol/openid-connect/token`, 
      new URLSearchParams({
        grant_type: 'password',
        client_id: 'admin-cli',
        username: ADMIN_USERNAME,
        password: ADMIN_PASSWORD
      }),
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );
    
    return response.data.access_token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.response?.data || error.message);
    throw error;
  }
}

async function createUser(token) {
  const userData = {
    username: 'admin-user',
    email: 'admin@secretmanager.com',
    firstName: 'Admin',
    lastName: 'User',
    enabled: true,
    emailVerified: true,
    credentials: [{
      type: 'password',
      value: 'admin123',
      temporary: false
    }]
  };

  try {
    await axios.post(
      `${KEYCLOAK_URL}/admin/realms/${REALM}/users`,
      userData,
      {
        headers: { 'Authorization': `Bearer ${token}` }
      }
    );
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin-user —Å–æ–∑–¥–∞–Ω');
    
  } catch (error) {
    if (error.response?.status === 409) {
      console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin-user —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.response?.data || error.message);
    }
  }
}

async function main() {
  try {
    console.log('üîê –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Keycloak...\n');
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Keycloak
    await waitForKeycloak();
    
    console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const token = await getAdminToken();
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω\n');
    
    console.log('2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await createUser(token);
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Keycloak –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üåê Admin Portal: http://localhost:3001');
    console.log('üåê Client Portal: http://localhost:3000');
    console.log('üë§ –õ–æ–≥–∏–Ω: admin-user');
    console.log('üîë –ü–∞—Ä–æ–ª—å: admin123');
    console.log('');
    console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –ö–ª–∏–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é!');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080/admin');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ admin/admin');
    console.log('3. –í—ã–±–µ—Ä–∏—Ç–µ realm "master"');
    console.log('4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Clients ‚Üí Create');
    console.log('5. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ "secretmanager-client"');
    console.log('6. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ "secretmanager-admin"');
    console.log('7. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Redirect URIs: http://localhost:3000/*, http://localhost:3001/*');
    console.log('8. –í–∫–ª—é—á–∏—Ç–µ Standard Flow –∏ Direct Access Grants');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();
